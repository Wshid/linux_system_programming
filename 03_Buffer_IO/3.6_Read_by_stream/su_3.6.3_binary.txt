
개별문자나 행을 읽는 것이 아닌,
c구조체와 같은 복잡한 바이너리 데이터를 읽고 쓸때 사용

#include<stdio.h>

size_t fread(void *buf, size_t size, size_t nr, FILE *stream);

stream에서 size 바이트인 element nr개를 읽어서 buf에 저장
fp는 읽은 바이트 수만큼 증가

읽어들인 엘리먼트 수가 반환
    -> 읽은 바이트 수가 아님


nr보다 적은 값을 반환하여
    1. 실패
    2. EOF를 알려줌
ferror()와 feof()를 사용하지 않고는 두 조건중 어디에 해당하는지 알 수 없음

변수의 크기나 정렬, padding, 바이트 순서가 다르기때문에
    어플리케이션 마다 데이터를 못 읽을 수도 잇으며
    다른 머신에서 동작하는 경우 문제가 생길 가능성이 있음


정렬문제===

모든 아키텍쳐는 데이터 정렬 요구사항이 존재 => 단순히 바이트 배열이 아님

프로세서는 2,4,8,16과 같이 정해진 기본 단위로 메모리 접근
    프로세서의 주소공간은 0번지부터 시작되며, 기본단위의 정수배로 시작하는 주소에 접근해야함

일반적으로 변수는 C언어의 자료형 크기에 해당하여 정렬이 이루어짐
    => 32비트 정수는 4바이트 경계
    => 대부분의 아키텍쳐에서 int는 4로 나누어 떨어지는 메모리주소공간에 저장

정렬되지 않은 데이터에 접근할때 아키텍쳐마다 페널티 존재
    -> 접근은 가능하나, 성능저하
    -> 아예 접근 불가 // 하드웨어 예외로 처리
    -> 강제로 정렬하기 위해 하위 비트 제거 // 의도치 않는 방향으로 동작
    
컴파일러가 아키텍쳐에 맞게 정렬하므로 눈에 보이는 문제는 아님
    -> 구조체, 직접 메모리 관리, 바이너리 데이터 디스크 기록, 네트워크 통신
        => 정렬문제 발생
