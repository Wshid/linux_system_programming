select는 POSIX, poll은 SystemV

#include<poll.h>

int poll(struct pollfd *fds, nfds_t nfds, int timeout);
    //bitmask기반의 세가지 fd 대신,
            단일 pollfd 구조체 배열을 nfds개수만큼 사용
            
struct pollfd{
    int fd;
    short events; // 감시할 이벤트
    short revents; //발생한 이벤트
}

여러개의 pollfd 구조체를 poll에 넘겨 여러 fd를 감시하도록 설정 가능

events
    POLLIN // 읽을 데이터 존재
    POOLRDNORM // 일반 데이터
    POLLRDBAND // 우선권 있는 데이터
    POLLPRI // 시급한 데이터
    POLLOUT // 쓰기 블록 x
    POOLWRNORM // 일반 데이터 쓰기 블록 x
    POOLWRBAND // 우선권 있는 데이터 쓰기 블록 x
    POLLMSG // SIGPOLL 메세지 사용 가능
    
revents
    POLLER // fd에 에러
    POLLHUP // fd에서 이벤트 지체
    POLLNVAL // fd 유효 x
    
이벤트 값을 넘기면 안됨. 특정 경우에 반환되는 값
poll()에서는 명시적으로 예외를 확인할 필요가 없음

IN, PRI = select, readfds
OUT, WRBAND = writefds
IN = RDNORM | RDBAND
OUT = WRNORM

호출 반환시, pollfd 구조체에서 원하는 fd가 있는 항목을 찾은 뒤 revents에 플래크 켜졌는지 확인
POLLIN 사용시 읽기 블록x
POLLOUT 사용시 쓰기 블록 x
    => 두가지 동시에 사용 가능

timeout // 밀리초 단위 지정 가능
        // 무한으로 설정하려면 음수 사용
        // 0이면 즉시 반환

호출 성공시, revents필으닥 0이 아닌 구조체의 개수 반환
이벤트 발생전 timeout = 0
에러 발생시 -1, errno

EBADF : fd 유효 x
EFAULT : fds 포인터가 ps 주소공간 넘어감
EINTR : 이벤트 기다리는 중에 SIG, 재호출 필요
EINVAL : nfds인자가 FLIMIT_NOFILE 값 초과
ENOMEM : 메모리 부족