커널은 버퍼를 통해 쓰기작업을 지연함
ps가 쓰기 요청시, 버퍼로 데이터 복사 -> 버퍼의 변경표시를 하여 디스크의 복사본보다 메모리가 최신임을 알려줌
    -> 쓰기 요쳥은 바로 반환됨

파일의 동일한 블록에서 또 다른 쓰기 요청 발생시, 버퍼는 새로운 데이터로 갱신됨
    동일 파일의 다른 위치에서 쓰기 요청이 생기면 새로운 버퍼 생성
    
writeback : 버퍼에 있는 내용이 디스크와 메모리에 있는 데이터와 동기화

    1. 여유메모리가 설정된 경계값 이하로 가면,
        변경된 버퍼, 디스크에 기록
        비워진 버퍼를 삭제하여 메모리 공간 확보
    2. 설정된 값보다 오랫동안 유지된 버퍼, 디스크에 기록

Flusher Thread라는 커널 스레드 무리에서 수행됨
    위의 두가지 조건중 하나라도 만족시 Flusher Thread가 깨어나
        두 조건이 거짓이 될 때까지 버퍼의 내용을 디스크에 기록
        
동시에 여러 플러셔 스레드가 깨어나 쓰기 저장 수행이 가능
    -> 병렬성의 장점 극대화, 정체 회피
    정체 회피 : 하나의 블록 디바이스에 쓰기를 기다리는 동안 다른 블록 디바이스에도 쓰기 시도
        pdflush나 bdflush같은 예전 플러셔 스레드의 단점 개선

커널에서 버퍼는 buffer_head라는 자료구조로 표현
    버퍼가 비었는지, 변경되었는지에 관한 메타데이터 추적
    실제 데이터를 가리키는 포인터 포함
        => 이 데이터는 page cache에 존재, 버퍼 하부 시스템과 페이지 캐시 통합

커널 :2.4, 하부시스템과 페이지 캐시 분리 -> 페이지와 버퍼 캐시를 함ㄲ께 사용
    -> 버퍼 캐시(변경된 버퍼)와 페이지 캐시(캐시된 데이터로써)가 동시에 존재할 수 있음
        => 추후 두 캐시 동기화 하는 내용 필요
            => 통합 페이지 캐시는 2.4에 도입됨
            
지연된 쓰기와 버퍼 하부 시스템은
    정전시 데이터 손실이라는 위험
        => but 빠른 쓰기 보장
    입출력 동기화 사용이 간