page cache : disk fs에서 최근에 접근한 데이터를 저장하는 메모리 저장소
    CPU 속도에 비해 disk access는 엄청나게 느림

메모리에 쓰기를 요청한 데이터 저장 이후
    동일한 데이터에 대한 요청 발생시
        커널은 반복적인 디스크 접근을 피함
            메모리에서 바로 처리 가능

Temporal Locality(일시적인 지역성)이용
    참조 지역성(Locality of Reference)의 일부
    특정 시점에 리소스 접근시, 근래에 다시 접근할 가능성이 높다는 이론

Page Cache는 kernel이 fs 데이터를 탐색하는 첫번째 장소
    캐시에서 찾을 수 없을때만 disk에서 읽음

    Disk -> Page Cache -> Application으로 반환

Page Cache는 동적으로 크기 변경이 가능
    모든 여유 메모리 소진시, 가장 적게 사용한 page 제거

Page Cache에서 자주 사용하는 내용 삭제, 거의 사용하지 않는 데이터 Swap
Swap : 커널이 데이터를 디스크에 저장하여,
        실제 장착된 RAM보다 더 큰 메모리 공간을 확보할 수 있도록 하는 방법

커널은 디스크 swap 및 cache 삭제간의 균형을 맞춤 -> 휴리스틱(heuristic) 기법
    Heuristic : 경험에 기반하여 만족할만한 결과를 얻는 방법
    
Swap / Cache 균형
    /proc/sys/vm/swappiness
        0~100 사이의 값, 기본값=60
        메모리에 페이지 캐시 저장하면서 SWAP 많이 하려면 큰 값
        페이지 캐시 삭제하면서 SWAP 안하려면 작은 값
        

순차적 지역성(Sequencial Locality) : 데이터가 순차적으로 참조됨
    페이지 미리읽기(readahead)를 구현
            여유 있을 떄 디스크에서 데이터를 읽어서 페이지 캐시에 넣어두는 방식
    커널이 디스크에서 data block 읽을 때, 연이은 데이터를 읽어들이는 것
        추후 디스크 탐색이 필요하지 않으므로 효율이 높아짐
    프로세스가 첫번째로 읽은 데이터블록을 다루는 동안에 미리읽기 수행

커널은 미리읽기도 동적으로 관리
    미리읽기로 읽어둔 데이터 비중이 높아진다고 인지하면
            미리읽기 버퍼 크기를 지정하는 readahead window size를 늘린다.
                    16kb ~ 128kb까지
    유용하지 않다고 생각되면 기능을 꺼버릴 수 있음
    
연속적인 파일 IO는 임의 접근방식보다 선호되는 방법