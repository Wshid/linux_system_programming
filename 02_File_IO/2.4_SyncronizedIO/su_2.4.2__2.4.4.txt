최적화는 부족하지만 활용범위가 넓은

sync() 시스템 콜

모든 버퍼내용을 디스크에 동기화 한다

#include<unistd.h>

void sync(void); // 함수 인자 및 반환값도 없음. 호출은 항상 성공하며 버퍼의 모든 내용(데이터+메타)
디스크에 강제로 기록

다중 호출이 아닌 한번의 호출으로도 사용 가능

실제 sync을 쓰는 곳은 sync(8) 유틸리티

꼭 필요한 것을 기록할때는 fsync()와 fdatasync()을 이용하도록 할 것

===

O_SYNC 플래그

open()사용시 O_SYNC플래그 사용시, 모든 파일 입출력 동기화
read요청은 항상 동기화
write요청은 파일을 기록하는 작업기 동기화

write 작업 후 반환하기 전에 fsync()를 항상 호출
사용자 및 커널영역에서 소모되는 시간이 조금씩 늘어남

===

O_DSYNC, O_RSYNC

open()에서 사용 가능

O_DSYNC : 쓰기작업 직후 메타데이터를 제외한 일반데이터만 동기화
    -> 쓰기 요청 직후에 fdatasync() 호출
    O_SYNC가 더 확실한 동기화 // 하지만 사양이 더 높음

O_RSYNC : 쓰기 및 읽기 동기화
        -> 읽기 과정 중에 발생하는 부작용도 동기화
        -> 읽기 작업으로 변경된 메타데이터로 반환하기전에 데이터 기록
        -> 보통 O_SYNC과 O_DSYNC 같이 사용해야 함
        
        가장 유사한 작업은 read()호출 직후에 fdatasync() // 하지만 실제 필요하지 않음
        