리눅스에서는 표준 입출력 대안으로
app의 file을 메모리에 맵핑함

memorya ddress = file word 의 1:1대응

메모리에 상주하는 데이터처럼
메모리를 통해 파일에 직접 접근이 가능함

맵핑된 메모리 주소에 직접 쓰는 것만으로도
    디스크에 있는 파일에 기록 가능

===
4.3.1 mmap()

#include<sys/mman.h>
void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);

fd+offset에서 len바이트 만큼 메모리에 맵핑
addr 선언시, 해당 주소 선호한다고 커널에 알림
    그저 힌트일뿐이며, 대부분 0을 넘김
    ret = 메모리 맵핑의 실제 시작주소
prot : 접근 권한, 맵핑에 원하는 메모리 보호정책 명시
    PROT_NONE : 접근 불가능한 페이지(거의 사용되지 않음)
        -> 메모리 공간 예약
        -> 접근할 수 없는 임의의 주소공간 확보, bf 대비하기 위한 보호페이지 생성시 사용
    PROT_READ : 읽기 가능 페이지
    PROT_WRITE : 쓰기 가능 페이지
    PROT_EXEC : 실행 가능 페이지
        * 파일을 여는 모드와 동일해야함
        
            보호 플래그에서 읽기와 실행을 구분하지 않는 아키텍쳐는
                PROT_READ가 PROT_EXEC을 내포함
            호환성 있는 프로그램은 맵핑 공간에 코드 실행시, PROT_EXEC 설정해야함
            읽기만 의도한 경우 BF. 공격 우려, 실행 권한 지정 안했어도 프로세서가 실행 허용이 가능
            
            최신 x86에서는 NX(No-eXecute)비트 도입하여 읽기 가능, 실행 불가능 지원
            신형시스템에서는 PROT_READ가 PROT_EXEC 포함하지 않음
            
flag : 추가 동작, 맵핑의 유형과 그 동작에 관한 몇가지 요소 명시
    MAP_FIXED : addr인자를 힌트가 아닌 요구사항으로. 주소 미확보시 실패
                addr과 len이 기존 맵핑과 겹칠 시, 중첩 페이지는 새로운 맵핑으로 대체
                    호환성 떨어지므로 장려 x
    MAP_PRIVATE : 맵핑이 공유되지 않음
                    파일은 copy-on-write 맵핑 후, 내용에 변경 되도 실제 파일이나 다른 ps에 반영 x
                
                * copy-on-write
                    자식 프로세스 생성시, 기존 부모가 가지고 있는 메모리 영역의 자료만 사용할 경우
                    자식 ps를 위한 메모리 영역을 할당하지 않음. 단, 공유한 메모리의 한 부분 변경시,
                    Child를 위한 메모리 영역 할당
                    평소에는 리소스를 공유하다가도, 리소스를 수정할 상황이 생기면, 이전 Resource의 복사본 사용
                    그 후에 각각의 ps의 포인터만 변경 시켜주면 이전과 같이 원활하게 동작하도록 함
    
    MAP_SHARED : 같은 파일을 맵핑한 모든 ps와 맵핑 공유
                    맵핑된 페이지에 쓰기를 하면 실제 파일에도 동일 내용 기록
                    맵핑 페이지를 읽으면 다른 ps 기록한 내용도 반영됨

MAP_PRIVATE와 MAP_SHARED를 동시에 사용하면 안됨
fd 맵핑시, 해당 파일의 참조 카운터 증가함
    맵핑한 후에 fd를 닫더라도 ps는 여전히 맵핑된 주소 접근 가능
    파일의 맵핑을 해제하거나 ps가 종료되야지 참조 카운터 감소


void *p;
p=mmap(0, len, PROT_READ, MAP_SHARED, fd, 0);
    // fd를 len 바이트 만큼 읽기형태로 맵핑함


페이지크기
- MMU(Memory Management Unit ; 메모리관리 유닛)이 사용하는 최소 단위
- 별도의 접근 권한과 동작 방식을 따르는 가장 작은 메모리 단위
- 메모리 맵핑을 구성하는 블록, 프로세스 주소 공간을 구성하는 블록

mmap() system call -> page를 다룸
    addr과 offset인자는 페이지 크기의 정수배가 되어야함
        -> 아닐경우 다음 페이지의 정수배로 확장
    패딩된 공간은 0으로 채워짐.
        이 영역을 읽게 되면 0을 반환하며, 실제 파일에 반영되지 않음(MAP_SHARED를 하더라도)
        
페이지 크기 얻을 수 있는 메서드 : sysconf() // 다양한 시스템 정보 조회 가능

#include<unistd.h>

long sysconf(int name); // ret = (name | -1, errno=EINVAL)
    -1(무제한 일수도)이 유효한 값이 있을수도 있으므로, 호출하기전에 errno 초기화, 호출 후에 재검토

long page_size=sysconf(_SC_PAGESIZE); // 런타임에 페이지 바이트 크기를 구하는 방법

#include<unistd.h>
int getpagesize(void); //바이트 단위 페이지 크기 반환

int page_size=getpagesize(); // 모든 UNIX 시스템이 이를 지원하지 않음

int page_size=PAGE_SIZE; // 런타임이 아닌 컴파일 시점에 페이지 크기
    -> <sys/user.h>에 정의됨


몇몇 아키텍쳐는 머신 유형에 맞춰 다양한 페이지 크기 지원
    특정 아키텍처로 컴파일 된 바이너리는 해당 아키텍처의 모든 머신에서 동ㅈ가해야함
        -> 한 번 빌드하면 같은 아키텍쳐의 모든 머신에서 실행 가능
    페이지 크기 = 코드 내 고정 // 위에 해당되지 않음
    페이지 크기는 런타임에 결정하는 것이 좋음
        보통 addr, offset=0이므로, 동적으로 페이지 크기 확인이 어렵진 않음
    
sysconf()를 사용하는 것이 호환성 고려했을때 최선의 방법



관련 시그널
SIGBUS : ps가 더이상 유효하지 않은 맵핑영역 접근시
SIGSEGV : ps가 읽기 전용으로 맵핑된 영역에 쓰려고 할때 발생

