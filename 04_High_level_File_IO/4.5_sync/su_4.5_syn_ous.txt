동기화      synchronized
비동기화    nonsynchronized

동기식      synchronous
비동기식    asynchronous


동기식 쓰기 연산    커널의 버퍼캐시에 기록되기 전까지 반환 x
동기식 읽기 연산    데이터가 app이 제공하는 사용자 버퍼 저장 전까지 반환 x

비동기식 쓰기 연산  데이터가 사용자 영역에 있더라도 즉시 반환
비동기식 읽기 연산  읽으려는 데이터 준비 전에 반환
    -> 비동기식 연산은 요청을 큐에 넣을뿐 실제로 작업 수행은 하지 않음
        => 실제 연산이 완료 되었는지, 얼마나 수행했는지 확인 매커니즘 필요

동기화 연산은
    동기식 연산보다 제약적이지만 안전

동기화 쓰기 연산    데이터를 디스크에 기록, 커널 버퍼 = 디스크
동기화 읽기 연산    항상 데이터의 최신 복사본 반환, 디스크에서 읽을 가능성 높음


동기식/비동기식 : 입출력 연산 반환 전에 이벤트(데이터의 저장)를 기다리는지
동기화/비동기화 : 이벤트가 발생(데이터를 디스크 기록)하는지의 여부


UNIX의 쓰기 연산 : 동기식 + 비동기화
UNIX의 읽기 연산 : 동기식 + 동기화



쓰기 연산의 동기화 방식

    동기식 + 동기화     쓰기연산은 데이터를 디스크에 비우기 전까지는 반환 x
                        O_SYNC 플래그 명시시 동작함
    
    비동기식 + 동기화   쓰기 연산은 큐에 들어가자마자 반환
                        최종적으로 쓰기 연산이 실행 되어야 데이터 디스크 기록됨
    
    비동기화 + 동기식   쓰기 연산은 데이터가 커널 버퍼에 저장되기 전까지 반환 x
                        일반적인 동작 방식
    
    비동기화 + 비동기식 쓰기 연산은 요청이 큐에 들어가자마자 반환
                        최종적으로 쓰기 연산 실행시, 데이터가 커널버퍼에 저장


커널버퍼 / 디스크 : 비동기화 / 동기화
연산 완료/시작시 : 동기식 / 비동기식



읽기 연산의 동기화 방식 // 읽기 연산은 항상 동기화 방식으로 동작
    동기식      항상 최신데이터가 제공된 버퍼로 읽어오기 전까지 반환 x 
                일반적인 동작방식
    비동기식    읽기 연산은 큐에 들어가자마자 반환
                최종적으로 읽기 연산 실행 되어야 최신 데이터 반환
